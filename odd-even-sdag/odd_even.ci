
mainmodule odd_even {
  mainchare Main {
    entry Main(CkArgMsg *m);
    entry [reductiontarget] void done();
    entry [reductiontarget] void verified();
  };

  array [1D] Elem {
    entry Elem(CProxy_Main m, int s);
    entry void do_sort() {
      while (stage < n) {
        when recv_num[stage](int from_stage, int d) serial {
          if ((should_be_greater() && num < d) || (!should_be_greater() && num > d))
            num = d;

          ++stage;
          thisProxy[partner(stage)].recv_num(stage, num);
        }
      }
      serial {
        CkCallback cb(CkReductionTarget(Main, done), main);
        contribute(0, nullptr, CkReduction::nop, cb);
      }
    };
    entry void recv_num(int from_stage, int d);
    entry void verify(int d, bool is_main);
  };
};
