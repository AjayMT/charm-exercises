
module data_container {
  template <typename DType>
  array [1D] DataContainer {
    entry DataContainer(CkCallback cb, int n);
    entry void set_data(std::vector<DType> d);

    entry void balance() {
      for (stage = 1; stage < num_containers; stage <<= 1) {
        if (this->thisIndex + stage < num_containers) serial {
            this->thisProxy[this->thisIndex + stage].recv_count(stage, prefix_sum);
          }
        if (this->thisIndex >= stage)
          when recv_count[stage](int stage, int count) serial {
            prefix_sum += count;
          }
      }

      serial {
        if (this->thisIndex == num_containers - 1)
          this->thisProxy.recv_total(prefix_sum);
      }

      when recv_total(int t) serial {
        total = t;
        mean = total / num_containers;
        balance_data();
      }
    }

    entry void recv_total(int t);
    entry void recv_count(int stage, int count);
    entry void recv_data(std::vector<DType> d);
  };
};
