
mainmodule particles {
  include "particles.h";

  mainchare Main {
    entry Main(CkArgMsg *m);
    entry [reductiontarget] void gather(CkReductionMsg *m);
    entry [reductiontarget] void done();
  };

  array [2D] Box {
    entry Box(int n, int k, CProxy_Main m);

    entry void run() {
      for (iter = 0; 1; ++iter) {
        serial {
          if (iter % 10 == 0) {
            int data = particles.size();
            CkReduction::tupleElement tuple_red[] = {
              CkReduction::tupleElement(sizeof(int), &data, CkReduction::max_int),
              CkReduction::tupleElement(sizeof(int), &data, CkReduction::sum_int)
            };
            CkReductionMsg *msg = CkReductionMsg::buildFromTuple(tuple_red, 2);
            CkCallback cb(CkReductionTarget(Main, gather), main);
            msg->setCallback(cb);
            contribute(msg);
          }
          update_particles();
        }

        for (sub_iter = 0; sub_iter < 8; ++sub_iter) {
          when recv_particle[iter](
            int from, std::vector<Particle> ps
            ) serial {
            particles.insert(particles.end(), ps.begin(), ps.end());
          }
        }
      }
      serial {
        CkCallback cb(CkReductionTarget(Main, done), main);
        contribute(0, nullptr, CkReduction::nop, cb);
      }
    };

    entry void recv_particle(
      int from,
      std::vector<Particle> particles
      );

    entry void render(liveVizRequestMsg *m);
  };
};
